// 한 줄 주석 : cmd + /
console.log("Hello World!");

// terminal에 아래꺼 작성 후 엔터하면 실행됨!
//node 01_syntax.js
//node 01 + tab키

// ReferenceError: Console is not defined
// Console.log("Hello World!");
// 대소문자 구분함

a = 1;
/* 
    왼쪽에 있는 글자(이름)에다가 오른쪽 값을 담는 걸 : 할당이라고 하고
    왼쪽에 있는 글자(이름) -> 변수
    변수 -> variable. 시스템에 있는 메모리에다가 어떤 특정한 값을 저장하고, 나중에 호출할 수 있도록 함.

    !특수문자 = 1 (X)
    $$ = 1;  (O) 달러
    __ = 2;  (O) 언더바
    중간에 스페이스를 섞으면 안됨. a f = 1;

    중간에 합쳐진 단어라는 걸 알려주고 싶으면 표기법을 쓰게 되는데,
    자바스크립트에서는 2가지 표기법을 사용 -> camelCase, PascalCase...

    camelCase -> 맨앞에는 소문자, 스페이스가 들어가는 곳은 대문자. hello world -> helloWorld
    PascalCase -> 맨앞에는 대문자, 스페이스가 들어가는 곳은 대문자. hello world -> HelloWorld
    snake_case -> 모두 소문자, 중간에 _를 섞음. 파이썬 같은데에서 사용.
    CAPITAL_SNAKE_CASE, YELLING_SNAKE_CASE -> 상수값, 리터럴값.
    kebab-case -> 변수명에는 쓸 수 X. javascript에서는 변수명에 - 특수문자를 쓸 수 X.
    
    변수명에서는 camelCase를 쓴다!! 
*/

console.log(a); //변수에다가 담긴 값을 사용해줌

/*
    프로젝트 파일명이나 폴더는 '경로'이기 때문에 카멜케이스나 파스칼로 표현하면 잘 안보인다.
    근데 스페이스를 섞으면 나중에 %20 등으로 인코딩이 깨짐이 나옴.
    그래서  언더바(_)나 (대쉬)-로 하고, 웹에 직접적으로 노출된다면 -.
*/

//[선언]
var b; //b라고하는 변수명을 메모리에다가 탑재해서 사용하겠다 라는 뜻.
b = 1000; //값(리터럴)을 집어넣음
// [할당/대입]
b = "문자열";
b = "문자열";
// [호출]
console.log(b);

// [선언 + 할당/대입 ==> 초기화라고함]
var c = 100;
console.log(c);

// 하지만 앞으로 var를 쓸 일은 없었다고 한다..!!!
/*
    var는 여러 문제(호이스팅, 스코프 문제 등)가 있어서 지양되고 있는 구문법이다.!
*/
console.log(d);
var d = 1000000; // 이게 맨처음으로 가서 선언 된다..!? (호이스팅)
console.log(d);

var e; // 선언
var e; // 재선언 - 재선언을 해도 전혀 에러 없이 지나감 (그냥 무시함)

// 0, "", false -> 없는것과 다름없는 값들이 있기는 한데, 얘네들도 '값'이긴 함.!
// null : 의도적으로 비워진 것. 메모리가 빈 상태로 할당된 것.
// ex) '조옐' 사물함을 열어봤는데 텅텅 비었다.

// undefined : 있어본적이 없다, 선언된적도 없다. 해당 키값 혹은 변수값에 대하여 할당된 메모리 공간을 찾을 수 없다.
// ex) '조옐' 사물함이라는게 없다.
