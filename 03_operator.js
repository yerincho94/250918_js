//연산자!!!
/*
    1개 이상의 피연산자와 함께 사용해서 계산을 하는 특수기호나 문구.
    [산술연산자]
    4칙연산. 나누기 or 곱하기 -> 키보드에 없지만 사용 가능

    + - * /
 */
console.log("1+1 = ", 1 + 1);
console.log("2-3 = ", 2 - 3);
console.log("2*3 = ", 2 * 3);
console.log("2/3 = ", 2 / 3);

// %, **
console.log("100/8 = ", 100 / 8);
console.log("100%8 = ", 100 % 8); //나머지
console.log("2**3 = ", 2 ** 3); //거듭제곱 (2의 몇 승) <-- 2의3 제곱
console.log("2 ** 0.5 = ", 2 ** 0.5); //루트
console.log("2 ** (1/3) = ", 2 ** (1 / 3));
// ()를 통해서 명시적으로 먼저 계산할 수 있다.

//연산자에는 각각의 우선순위들이 있는데 일반적으로 외우기보다는 ()를 통해서 먼저 계산하게 하면 된다.

//대입연산자, 복합대입연산자
// =
/*
    변수에 값을 주입/할당하는 연산자
 */

/*
    03_operator.js에 복합대입연산자에 대한 상세한 설명과 배경 지식을 코드 내 주석으로 표시해줘

    복합 대입 연산자 (Compound Assignment Operators)

    복합 대입 연산자는 산술 연산자와 대입 연산자를 결합한 형태의 연산자입니다.
    코드의 가독성을 높이고, 타이핑을 줄여주는 효과가 있습니다.

    예를 들어, 'a = a + 10;' 와 'a += 10;' 은 동일한 작업을 수행합니다.
    'a'라는 변수에 10을 더한 후, 그 결과를 다시 'a'에 할당하는 것입니다.

    내부적으로는 변수의 값을 가져와 연산을 수행하고 다시 변수에 할당하는 과정을
    한 번에 처리하기 때문에, 경우에 따라 미세한 성능 향상을 가져올 수도 있습니다.
    (최신 JavaScript 엔진은 최적화가 잘 되어 있어 성능 차이가 거의 없을 수 있습니다.)

    주요 복합 대입 연산자:
    - += : 덧셈 후 대입 (a += b  =>  a = a + b)
    - -= : 뺄셈 후 대입 (a -= b  =>  a = a - b)
    - *= : 곱셈 후 대입 (a *= b  =>  a = a * b)
    - /= : 나눗셈 후 대입 (a /= b  =>  a = a / b)
    - %= : 나머지 연산 후 대입 (a %= b  =>  a = a % b)
    - **= : 거듭제곱 후 대입 (a **= b  =>  a = a ** b)
 */
let a = 10;
a = a + 10;
console.log("a=", a);
a += 10; //복합대입 연산자 -> 산술계산을 하고 대입까지 처리해주세요!!!
console.log("a=", a); // a = a+10

a -= 5;
console.log("a=", a); // a = a - 5

a *= 2;
console.log("a=", a); // a = a * 2

a /= 5;
console.log("a=", a); // a = a / 5

a %= 2;
console.log("a=", a); // a = a % 2

// [비교연산자]
//숫자 (부등호)
console.log("10 > 5:", 10 > 5); //true
console.log("10 < 5:", 10 < 5); //false
// a > b => 맞으면 true, 틀리면 false

console.log('"a" > "b":', "a" > "b"); //ASCII code으로 비교

//동등 연산자
// 같다 = , = -> 대입연산자.
// ==, != -> 같은지 여부
console.log("1 == 1:", 1 == 1); //true
console.log("1 == '1':", 1 == "1"); //true -> 자동 변환을 시켜버림..
console.log("'1' === 1:", "1" === 1); //false

//자바스크립트의 자동변환 2가지 종류
/*
    1) 문자-숫자 간 자동변환
    2) truthy / falsy한 값
*/

/* 
    더하기 연산의 경우 : 
        문자와 숫자를 더하기를 시도하면, 문자를 덧셈 연산을 할 경우 연결(concatenate)을 하고,
        숫자는 뎃셈(add)를 하는데, 덧셈에서는 문자가 이김

    */
console.log(1 + "1");

// [일치연산자]가 별도로 존재 '==='
//'자동 변환 없이' 값 자체로 비교하겠다
console.log("'1' === 1:", "1" === 1); //false
console.log("1" !== 1); //true

//2) truthy / falsy한 값
// 비어있다, 없다 -> false . [], {}, 0, undefined, null, ""
// 0이 아닌 값(NaN 포함). [....], {....}, "..." -> true
console.log("0 == false:", 0 == false); //true -> 자동변환 허용시 false 취급 가동
console.log("0 === false:", 0 === false); //false -> 자동변환 비허용

//js 놀리는 문구 중 하나. (자동변환 핵심)
console.log("" == false); //true : 비어있는 류의 데이터는 falsy
console.log("0" == false); //true : false도 일종의 숫자 처럼 판정 (false:0, true:1)
console.log("" == "0"); //false : 문자열간 비교가 되면서 정말 문자들 사이의 비교가 됨
